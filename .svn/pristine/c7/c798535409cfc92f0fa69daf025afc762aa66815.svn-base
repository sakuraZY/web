const state = {
  views: {
    _CENTERID_DEFAULT: {
      visitedViews: [],
    },
  },
  noCacheViews: ['Redirect'],
  defaultCenterId: '_CENTERID_DEFAULT',
  affixTags: [
    {
      href: '/',
      icon: 'home',
    },
  ],
};

const mutations = {
  ADD_VISITED_VIEW: (state, { tag, centerId }) => {
    const targetCenterId = centerId || state.defaultCenterId;
    const title = tag.title || (tag.href === '/' ? '' : '标签页');
    const view = { ...tag, title };
    if (!state.views[targetCenterId]) {
      state.views[targetCenterId] = {
        visitedViews: [view],
      };
      return;
    }
    if (state.views[targetCenterId].visitedViews.some(v => v.href === tag.href)) return;
    state.views[targetCenterId].visitedViews.push(view);
  },
  ADD_NOCACHED_VIEW: (state, name) => {
    if (state.noCacheViews.includes(name)) return;
    state.noCacheViews.push(name);
  },

  DEL_VISITED_VIEW: (state, { tag, centerId }) => {
    const targetCenterId = centerId || state.defaultCenterId;
    for (let i = 0; i < state.views[targetCenterId].visitedViews.length; i += 1) {
      const view = state.views[targetCenterId].visitedViews[i];
      if (view.href === tag.href) {
        state.views[targetCenterId].visitedViews.splice(i, 1);
        break;
      }
    }
  },
  DEL_NOCACHED_VIEW: (state, name) => {
    const index = state.noCacheViews.indexOf(name);
    if (index > -1) {
      state.noCacheViews.splice(index, 1);
    }
  },

  DEL_OTHERS_VISITED_VIEWS: (state, { tag, centerId }) => {
    const targetCenterId = centerId || state.defaultCenterId;
    state.views = {
      ...state.views,
      [targetCenterId]: {
        ...state.views[targetCenterId],
        visitedViews: [...state.affixTags, tag],
      },
    };
  },
  DEL_ALL_VISITED_VIEWS: (state, centerId) => {
    const targetCenterId = centerId || state.defaultCenterId;
    state.views = {
      ...state.views,
      [targetCenterId]: {
        visitedViews: [...state.affixTags],
      },
    };
  },

  UPDATE_VISITED_VIEW: (state, { tag, centerId }) => {
    const targetCenterId = centerId || state.defaultCenterId;
    for (let i = 0; i < state.views[targetCenterId].visitedViews.length; i += 1) {
      let v = state.views[targetCenterId].visitedViews[i];
      if (v.href === tag.href) {
        v = Object.assign(v, tag);
        break;
      }
    }
    state.views = { ...state.views };
  },
  INIT_CENTER_VIEW: (state, centerId) => {
    if (state.views[centerId]) {
      return;
    }
    state.views[centerId] = {
      visitedViews: [],
    };
  },
};

const actions = {
  addView({ commit }, payload) {
    commit('ADD_VISITED_VIEW', payload);
  },
  delNoCachedView({ commit }, name) {
    commit('DEL_NOCACHED_VIEW', name);
  },

  delView({ dispatch, state }, payload) {
    return new Promise((resolve) => {
      dispatch('delVisitedView', payload);
      const { centerId } = payload;
      const targetCenterId = centerId || state.defaultCenterId;
      resolve({
        visitedViews: [...state.views[targetCenterId].visitedViews],
      });
    });
  },
  delVisitedView({ commit, state }, payload) {
    return new Promise((resolve) => {
      commit('DEL_VISITED_VIEW', payload);
      const targetCenterId = payload.centerId || state.defaultCenterId;
      resolve([...state.views[targetCenterId].visitedViews]);
    });
  },
  addNoCachedView({ commit, state }, name) {
    return new Promise((resolve) => {
      commit('ADD_NOCACHED_VIEW', name);
      resolve([...state.noCacheViews]);
    });
  },

  delOthersViews({ dispatch, state }, payload) {
    return new Promise((resolve) => {
      dispatch('delOthersVisitedViews', payload);
      const targetCenterId = payload.centerId || state.defaultCenterId;
      resolve({
        visitedViews: [...state.views[targetCenterId].visitedViews],
      });
    });
  },
  delOthersVisitedViews({ commit, state }, payload) {
    return new Promise((resolve) => {
      commit('DEL_OTHERS_VISITED_VIEWS', payload);
      const targetCenterId = payload.centerId || state.defaultCenterId;
      resolve([...state.views[targetCenterId].visitedViews]);
    });
  },

  delAllViews({ dispatch, state }, centerId) {
    const targetCenterId = centerId || state.defaultCenterId;
    return new Promise((resolve) => {
      dispatch('delAllVisitedViews', targetCenterId);
      resolve({
        visitedViews: [...state.views[targetCenterId].visitedViews],
      });
    });
  },
  delAllVisitedViews({ commit, state }, centerId) {
    const targetCenterId = centerId || state.defaultCenterId;
    return new Promise((resolve) => {
      commit('DEL_ALL_VISITED_VIEWS', targetCenterId);
      resolve([...state.views[targetCenterId].visitedViews]);
    });
  },

  updateVisitedView({ commit }, payload) {
    commit('UPDATE_VISITED_VIEW', payload);
  },

  initCenterView({ commit }, centerId) {
    commit('INIT_CENTER_VIEW', centerId);
  },
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
};
